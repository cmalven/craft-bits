{# ------------------------------------------------------------------ #}
{# Input: Text
{# ------------------------------------------------------------------ #}
{#
  {{ text({
    mainClass: 'input-text',
    classes: '',
    labelSuffixClass: '__label',
    inputSuffixClass: '__input',
    errorsSuffixClass: '__errors',
    showLabel: false,
    name: 'email',
    label: 'Email',
    value: '',
    type: 'text',
    placeholder: 'someone@gmail.com',
    autocomplete: false,
    errors: ['Some error message'],
    disabled: false,
    required: false,
    inputAttrs: {
      'minlength': 1,
      'maxlength': 5
    }
  }) }}

  Renders a generic text input.
#}

{%- macro text(options = {}) -%}

{% set defaults = {
  mainClass: 'input-text',
  classes: '',
  labelSuffixClass: '__label',
  inputSuffixClass: '__input',
  errorsSuffixClass: '__errors',
  type: 'text',
  name: 'fallback',
  label: 'Fallback Label',
  showLabel: true,
  autocomplete: false,
  placeholder: null,
  disabled: false,
  required: false,
  errors: [],
  inputAttrs: {}
} %}

{% set options = defaults | merge(options) %}

{% set isTextarea = options.type == 'textarea' %}
{% set el = isTextarea ? 'textarea' : 'input' %}
{% set autocomplete = options.autocomplete ?? false ? 'on' : 'off' %}

<div
  class="{{ options.mainClass }} {{ options.classes }} {% if options.required %}{{ options.mainClass }}--required{% endif %}"
  data-type="{{ options.type }}"
  data-name="{{ options.name }}"
>
  {% if options.showLabel%}
    <label
      class="{{ options.mainClass }}__{{ options.labelSuffixClass }}"
      for="{{ options.name }}">
        {{ options.label }}
    </label>
  {% endif %}

  <{{ el }}
    class="{{ options.mainClass }}__{{ options.inputSuffixClass }}"
    name="{{ options.name }}"
    id="{{ options.name }}"
    {% if not isTextarea %}
    value="{{ options.value ?? '' }}"
    type="{{ options.type }}"
    {% endif %}
    {% if not isTextarea %}type="{{ options.type }}"{% endif %}
    {% if options.placeholder %}placeholder="{{ options.placeholder }}"{% endif %}
    {% if options.disabled %}disabled{% endif %}
    {% if options.required %}required{% endif %}
    autocorrect="off"
    autocapitalize="off"
    autocomplete="{{ autocomplete }}"
    {%- for key, val in options.inputAttrs -%}
      {{ key }}="{{ val }}"
    {%- endfor -%}
  >{% if isTextarea %}{{ options.value ?? '' }}</{{ el }}>{% endif %}

  {% if options.errors | length %}
    <div class="{{ options.mainClass }}__{{ options.errorsSuffixClass }}">
      {% for error in options.errors %}
        <p>{{ error }}</p>
      {% endfor %}
    </div>
  {% endif %}
</div>

{%- endmacro %}


{# ------------------------------------------------------------------ #}
{# Input: Textarea
{# ------------------------------------------------------------------ #}
{#
  {{ textarea({
    mainClass: 'input-textarea',
    classes: '',
    showLabel: true,
    name: 'comment',
    label: 'Comment',
    value: '',
    placeholder: 'The quick brown fox jumped over the lazy dog',
    autocomplete: false,
    errors: ['Some error message'],
    disabled: false,
    required: false,
    inputAttrs: {
      'rows': 3
    }
  }) }}

  Renders a generic textarea.
#}

{%- macro textarea(options = {}) -%}

{% import _self as macros %}

{% set defaults = {
  mainClass: 'input-textarea',
  value: '',
  type: 'textarea'
} %}

{% set options = defaults | merge(options) %}

{{ macros.text(options) }}

{%- endmacro %}


{# ------------------------------------------------------------------ #}
{# Input: Selectable
{# ------------------------------------------------------------------ #}
{#
  {{ selectable({
    mainClass: 'input-checkbox',
    classes: '',
    labelSuffixClass: '__label',
    itemsSuffixClass: '__items',
    itemSuffixClass: '__item',
    itemInputSuffixClass: '__item-input',
    itemLabelSuffixClass: '__item-label',
    name: 'options',
    label: 'Options',
    type: 'checkbox|radio',
    unselectedSvg: '<svg … />',
    selectedSvg: '<svg … />'',
    items: [
      {
        label: 'Foo',
        value: 'foo',
        selected: false
      }
    ],
    required: false
  }) }}

  Renders a generic text input.
#}

{%- macro selectable(options = {}) -%}

{% set defaults = {
  mainClass: 'input-selectable',
  classes: '',
  labelSuffixClass: '__label',
  itemsSuffixClass: '__items',
  itemSuffixClass: '__item',
  itemInputSuffixClass: '__item-input',
  itemLabelSuffixClass: '__item-label',
  name: 'options',
  type: 'checkbox',
  label: null,
  unselectedSvg: null,
  selectedSvg: null,
  items: [],
  required: false
} %}

{% set options = defaults | merge(options) %}

<div class="{{ options.mainClass }} {{ options.classes }}">
  {% if options.label %}
    <h3 class="{{ options.mainClass }}__{{ options.labelSuffixClass }}">{{ options.label }}</h3>
  {% endif %}

  <div class="{{ options.mainClass }}__{{ options.itemsSuffixClass }}">
    {% for item in options.items %}

      <div class="{{ options.mainClass }}__{{ options.itemSuffixClass }}">
        <input
          name="{{ options.name }}"
          id="{{ item.value }}"
          type="{{ options.type }}"
          class="{{ options.mainClass }}__{{ options.itemInputSuffixClass }}"
          value="{{ item.value }}"
          {%- if required ?? false -%}
            required
          {%- endif -%}
          {%- if item.selected ?? false -%}
            checked
          {%- endif -%}
        >
        <label class="{{ options.mainClass }}__{{ options.itemLabelSuffixClass }}" for="{{ item.value }}">
          {% if options.unselectedSvg ?? null and options.selectedSvg ?? null %}
            <span class="{{ options.mainClass }}__item-label-unselected">{{ options.unselectedSvg | raw }}</span>
            <span class="{{ options.mainClass }}__item-label-selected">{{ options.selectedSvg | raw }}</span>
          {% endif %}
          {{ item.label }}
        </label>
      </div>

    {% endfor %}
  </div>
</div>

{%- endmacro %}